{"formatVersion":"1.0","generatedAt":"2022-03-02T14:01:43Z","generatedBy":{"name":"Max Cobb"},"keywords":["RealityKit","Augmented Reality","ARKit","RealityUI","FocusEntity"],"name":"RealityKit Package Collection","overview":"Packages to be used by RealityKit apps","packages":[{"keywords":["arkit","arkit3","augmented-reality","ios13","realitykit","swift","swiftpackage","swiftpm"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/maxxfrazer/FocusEntity/main/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/maxxfrazer/FocusEntity/main/README.md","summary":"Bringing the scanning box from SceneKit to RealityKit","url":"https://github.com/maxxfrazer/FocusEntity","versions":[{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.1"}},"version":"2.2.5"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.0"}},"version":"2.2.4"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.0"}},"version":"v2.2.4"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.0"}},"version":"v1.1.1"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.0"}},"version":"v1.1.0"},{"defaultToolsVersion":"5.0","manifests":{"5.0":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"FocusEntity","products":[{"name":"FocusEntity","targets":["FocusEntity"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"FocusEntity","name":"FocusEntity"}],"toolsVersion":"5.0"}},"version":"v1.0.3"}]},{"keywords":["3d-graphics","ar","ar-vr","arkit","augmented-interactions","augmented-reality","hacktoberfest","ios","macos","mixed-reality","realitykit","swift","swift-package-manager","swiftpm","ui","user-experience","user-interaction","user-interface","ux","virtual-reality"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/maxxfrazer/RealityUI/main/LICENSE.md"},"readmeURL":"https://raw.githubusercontent.com/maxxfrazer/RealityUI/main/README.md","summary":"A Swift Package for creating familiar UI Elements and animations in a RealityKit rendered Augmented Reality or Virtual Reality scene.","url":"https://github.com/maxxfrazer/RealityUI","versions":[{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"}],"packageName":"RealityUI","products":[{"name":"RealityUI","targets":["RealityUI"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RealityUI","name":"RealityUI"}],"toolsVersion":"5.2"}},"version":"1.2.1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"}],"packageName":"RealityUI","products":[{"name":"RealityUI","targets":["RealityUI"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RealityUI","name":"RealityUI"}],"toolsVersion":"5.2"}},"version":"v1.2.1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"},{"name":"macos","version":"10.15"}],"packageName":"RealityUI","products":[{"name":"RealityUI","targets":["RealityUI"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RealityUI","name":"RealityUI"}],"toolsVersion":"5.2"}},"version":"v1.2.0"}]},{"keywords":["arkit","arkit3","arsession","augmented-reality","collaborative-session","ios","mixed-reality","multipeer-connectivity","multipeerconnectivity","multiplayer","realitykit","swift","swift-package-manager","swiftpm"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/maxxfrazer/MultipeerHelper/main/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/maxxfrazer/MultipeerHelper/main/README.md","summary":"A light swift wrapper around the iOS MultipeerConnectivity framework. Including an example project using RealityKit's MultipeerConnectivityService.","url":"https://github.com/maxxfrazer/MultipeerHelper","versions":[{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"11.0"},{"name":"macos","version":"10.10"},{"name":"tvos","version":"9.0"}],"packageName":"MultipeerHelper","products":[{"name":"MultipeerHelper","targets":["MultipeerHelper"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MultipeerHelper","name":"MultipeerHelper"}],"toolsVersion":"5.2"}},"version":"1.4.0"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"11.0"},{"name":"macos","version":"10.10"},{"name":"tvos","version":"9.0"}],"packageName":"MultipeerHelper","products":[{"name":"MultipeerHelper","targets":["MultipeerHelper"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MultipeerHelper","name":"MultipeerHelper"}],"toolsVersion":"5.2"}},"version":"v1.4.0-rc1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"11.0"},{"name":"macos","version":"10.10"},{"name":"tvos","version":"9.0"}],"packageName":"MultipeerHelper","products":[{"name":"MultipeerHelper","targets":["MultipeerHelper"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"MultipeerHelper","name":"MultipeerHelper"}],"toolsVersion":"5.2"}},"version":"v1.3.1"}]},{"keywords":["ar","arkit","arkit3","augmented","augmented-reality","ios","realitykit","swift","swiftpm"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/maxxfrazer/RKPointPin/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/maxxfrazer/RKPointPin/master/README.md","summary":"A UIView which points at a RealityKit Entity from screenspace","url":"https://github.com/maxxfrazer/RKPointPin","versions":[{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"RKPointPin","products":[{"name":"RKPointPin","targets":["RKPointPin"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RKPointPin","name":"RKPointPin"}],"toolsVersion":"5.2"}},"version":"v1.0.1"},{"defaultToolsVersion":"5.2","manifests":{"5.2":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"RKPointPin","products":[{"name":"RKPointPin","targets":["RKPointPin"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RKPointPin","name":"RKPointPin"}],"toolsVersion":"5.2"}},"version":"v1.0.0"}]},{"keywords":["3d","arkit","augmented-reality","ios","realitykit","swift","swiftpm"],"license":{"name":"MIT","url":"https://raw.githubusercontent.com/maxxfrazer/RKProgressBar/master/LICENSE"},"readmeURL":"https://raw.githubusercontent.com/maxxfrazer/RKProgressBar/master/README.md","summary":"A simple RealityKit Entity class for creating a geometry to show progress in the form of a capsule","url":"https://github.com/maxxfrazer/RKProgressBar","versions":[{"defaultToolsVersion":"5.1","manifests":{"5.1":{"minimumPlatformVersions":[{"name":"ios","version":"13.0"}],"packageName":"RKProgressBar","products":[{"name":"RKProgressBar","targets":["RKProgressBar"],"type":{"library":["automatic"]}}],"targets":[{"moduleName":"RKProgressBar","name":"RKProgressBar"}],"toolsVersion":"5.1"}},"version":"v1.0.0"}]}],"signature":{"certificate":{"issuer":{"commonName":"Apple Worldwide Developer Relations Certification Authority","organization":"Apple Inc.","organizationalUnit":"G3"},"subject":{"commonName":"Swift Package Collection: Rocket AR Limited","organization":"Rocket AR Limited","organizationalUnit":"278494H572","userID":"278494H572"}},"signature":"ewogICJhbGciIDogIlJTMjU2IiwKICAieDVjIiA6IFsKICAgICJNSUlGZ3pDQ0JHdWdBd0lCQWdJUVpPU21nSUR2bHkvdk9GUkdlTEFWYXpBTkJna3Foa2lHOXcwQkFRc0ZBREIxTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRFpYSjBhV1pwWTJGMGFXOXVJRUYxZEdodmNtbDBlVEVMTUFrR0ExVUVDd3dDUnpNeEV6QVJCZ05WQkFvTUNrRndjR3hsSUVsdVl5NHhDekFKQmdOVkJBWVRBbFZUTUI0WERUSXlNRE13TWpFek5EUTBNRm9YRFRJek1ETXdNakV6TkRRek9Wb3dnWkF4R2pBWUJnb0praWFKay9Jc1pBRUJEQW95TnpnME9UUklOVGN5TVRRd01nWURWUVFEREN0VGQybG1kQ0JRWVdOcllXZGxJRU52Ykd4bFkzUnBiMjQ2SUZKdlkydGxkQ0JCVWlCTWFXMXBkR1ZrTVJNd0VRWURWUVFMREFveU56ZzBPVFJJTlRjeU1Sb3dHQVlEVlFRS0RCRlNiMk5yWlhRZ1FWSWdUR2x0YVhSbFpERUxNQWtHQTFVRUJoTUNSMEl3Z2dFaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJQkR3QXdnZ0VLQW9JQkFRREJTWDdiajJmcFVWQkpwKzIyZ0hSTm16OENpNU1Rcm8vVVZjY3NaSk5VSGpTcTRXZ3lud1ZPNzZHWHZhbm9MSDNZdXZHNHQ5ZEd0MkNpWURQUXNiZFdNTFUzUzF4cnczUU5mSkFWM1BDRTZqeXE0KzdvbWtXLzgybTE3WFd1Vk1pYnllTSsxME1TYnErTGxKRnN1WlVhMlJONisxdlJzdjVXOFRUWldNdUY0c29FdEkwQ3lpK0RwczNKblpxYTduNVhqRjNrc2NwR1RXbHAzeS9DcTN0QnlFM0o2STBDcGRjTDh5YzROdUNmQU5mQm96WDl1M2RqalR3eVVuT2xFUnJjQWtySEVDTVh1V0hFY0NtSmZSSUVGZHJmREtOWmZpK2dHcXlzLzgyeVRWUjJjdHJab3d2V2dIMmczbHIrUzFKMExDRGN5U3Nuc2pNamFTOWZ3MlRKQWdNQkFBR2pnZ0h4TUlJQjdUQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZBbit3QldRK2E5a0NwSVN1U1lvWXd5WDdLZXlNRUVHQ0NzR0FRVUZCd0VCQkRVd016QXhCZ2dyQmdFRkJRY3dBWVlsYUhSMGNEb3ZMMjlqYzNBdVlYQndiR1V1WTI5dEwyOWpjM0F3TXkxM2QyUnlaek14T1RDQ0FSNEdBMVVkSUFTQ0FSVXdnZ0VSTUlJQkRRWUpLb1pJaHZkalpBVUJNSUgvTUlIREJnZ3JCZ0VGQlFjQ0FqQ0J0Z3lCczFKbGJHbGhibU5sSUc5dUlIUm9hWE1nWTJWeWRHbG1hV05oZEdVZ1lua2dZVzU1SUhCaGNuUjVJR0Z6YzNWdFpYTWdZV05qWlhCMFlXNWpaU0J2WmlCMGFHVWdkR2hsYmlCaGNIQnNhV05oWW14bElITjBZVzVrWVhKa0lIUmxjbTF6SUdGdVpDQmpiMjVrYVhScGIyNXpJRzltSUhWelpTd2dZMlZ5ZEdsbWFXTmhkR1VnY0c5c2FXTjVJR0Z1WkNCalpYSjBhV1pwWTJGMGFXOXVJSEJ5WVdOMGFXTmxJSE4wWVhSbGJXVnVkSE11TURjR0NDc0dBUVVGQndJQkZpdG9kSFJ3Y3pvdkwzZDNkeTVoY0hCc1pTNWpiMjB2WTJWeWRHbG1hV05oZEdWaGRYUm9iM0pwZEhrdk1CWUdBMVVkSlFFQi93UU1NQW9HQ0NzR0FRVUZCd01ETUIwR0ExVWREZ1FXQkJRaDlBV1hXMTdQZ2ZwNUlvOWprVGRNdG04bFJEQU9CZ05WSFE4QkFmOEVCQU1DQjRBd0VBWUtLb1pJaHZkalpBWUJJd1FDQlFBd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFFeURYc21jLzhMVmdyYVVsS2F4YVo2OUo5YzNtU3I4NnYydkxzck82UlJhbTY0bEg1bnJNWUl1b3NCbkdPeDNiMmwwcW53QnBxd052SWNCREtHN1MzNk0yd3p4MnhUczBmdDRGcWNrb3VJYXdkOUFlbE1tYzVNSHdmdXZndC9vNFNvdTFYc1JtQVpFK3JEVFBXRXhSamc1KzRWM3pOekRJd1d0TTQvOTZaRlVDejhtd3ozZDRKWlBNb2h2TnZvRlptYU0xdW10ZTBUbk51dEpkOXNVanJ5dGg4VGs0VWIxU0dRYWhldFJKRS9QYmxESHVPbXlhbG9KSGUvOTk2TlV4MGJBOWJmdndNdkJLdnlKRU8rcFlrSzBEUVBZWVVJTHFTdW9jTjJjZkgwQXoyemI0WlVuVUhyaklvNGVLdStFWUs1bVhxbE5Md29lQ1ZFUVp6TUsra009IgogIF0KfQ..HoQrQvAv5eLxzyWKY-GN-TSsHT0O-r-T8o5Ae1_F86FaUTT-4XGHMJu7JQ0qDLanuKmA_d4BsQm4Ia0FLm2QHT4U9yWrfbVavPlBN_6a2lUfpSe8ccgnCpBvQzPE_lZrW0FUJnIWnWc0RRCYVrdmxxipLiAwgFgt5ADh9o6MpZs4klHid1dJRKJF8Ez-gxIhV1GQVvS5t2Tlb3WqvpJC83Hb5BOr8oRR3JkQnELwIAWYGlUAwOTHs1yJ3XwxoLU_AgCGmZnnNU3AX8mT49AzPrRUzGNPfRQvYaY0L16ccaO0z3x5mI1ZcQmJ0g4uz7R8YHJks5nmp-ceCoAMChaIFA"}}